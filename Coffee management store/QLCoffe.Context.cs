//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Coffee_management_store
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class QLCoffeEntities : DbContext
    {
        public QLCoffeEntities()
            : base("name=QLCoffeEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Delivery_address> Delivery_address { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Invoice> Invoices { get; set; }
        public virtual DbSet<Invoice_detail> Invoice_detail { get; set; }
        public virtual DbSet<Menu> Menus { get; set; }
        public virtual DbSet<Monthly_pay> Monthly_pay { get; set; }
        public virtual DbSet<rank> ranks { get; set; }
        public virtual DbSet<Shop> Shops { get; set; }
        public virtual DbSet<Supplier_Detail> Supplier_Detail { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Income> Incomes { get; set; }
        public virtual DbSet<Inventory> Inventories { get; set; }
        public virtual DbSet<Customer_Employee_IDs> Customer_Employee_IDs { get; set; }
        public virtual DbSet<inventory_view> inventory_view { get; set; }
        public virtual DbSet<PrintInvoice> PrintInvoices { get; set; }
        public virtual DbSet<PrintInvoice2> PrintInvoice2 { get; set; }
        public virtual DbSet<working> workings { get; set; }
    
        [DbFunction("QLCoffeEntities", "calculate_employee_productivity")]
        public virtual IQueryable<calculate_employee_productivity_Result> calculate_employee_productivity()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<calculate_employee_productivity_Result>("[QLCoffeEntities].[calculate_employee_productivity]()");
        }
    
        [DbFunction("QLCoffeEntities", "calculate_shop_profitability")]
        public virtual IQueryable<calculate_shop_profitability_Result> calculate_shop_profitability()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<calculate_shop_profitability_Result>("[QLCoffeEntities].[calculate_shop_profitability]()");
        }
    
        [DbFunction("QLCoffeEntities", "calculate_shop_profitability1")]
        public virtual IQueryable<calculate_shop_profitability1_Result> calculate_shop_profitability1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<calculate_shop_profitability1_Result>("[QLCoffeEntities].[calculate_shop_profitability1]()");
        }
    
        [DbFunction("QLCoffeEntities", "Find_Customer")]
        public virtual IQueryable<Find_Customer_Result> Find_Customer(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Find_Customer_Result>("[QLCoffeEntities].[Find_Customer](@Name)", nameParameter);
        }
    
        [DbFunction("QLCoffeEntities", "Find_Drink")]
        public virtual IQueryable<Find_Drink_Result> Find_Drink(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Find_Drink_Result>("[QLCoffeEntities].[Find_Drink](@Name)", nameParameter);
        }
    
        [DbFunction("QLCoffeEntities", "Find_Employee")]
        public virtual IQueryable<Find_Employee_Result> Find_Employee(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Find_Employee_Result>("[QLCoffeEntities].[Find_Employee](@Name)", nameParameter);
        }
    
        [DbFunction("QLCoffeEntities", "Find_Employee1")]
        public virtual IQueryable<Find_Employee1_Result> Find_Employee1(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Find_Employee1_Result>("[QLCoffeEntities].[Find_Employee1](@Name)", nameParameter);
        }
    
        [DbFunction("QLCoffeEntities", "findEMP")]
        public virtual IQueryable<findEMP_Result> findEMP(string e_ID)
        {
            var e_IDParameter = e_ID != null ?
                new ObjectParameter("E_ID", e_ID) :
                new ObjectParameter("E_ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<findEMP_Result>("[QLCoffeEntities].[findEMP](@E_ID)", e_IDParameter);
        }
    
        [DbFunction("QLCoffeEntities", "FindTopSalesEmployee")]
        public virtual IQueryable<FindTopSalesEmployee_Result> FindTopSalesEmployee()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FindTopSalesEmployee_Result>("[QLCoffeEntities].[FindTopSalesEmployee]()");
        }
    
        [DbFunction("QLCoffeEntities", "get_employee_with_most_sales")]
        public virtual IQueryable<get_employee_with_most_sales_Result> get_employee_with_most_sales()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<get_employee_with_most_sales_Result>("[QLCoffeEntities].[get_employee_with_most_sales]()");
        }
    
        [DbFunction("QLCoffeEntities", "InitialTotal1")]
        public virtual IQueryable<InitialTotal1_Result> InitialTotal1(Nullable<int> i_ID)
        {
            var i_IDParameter = i_ID.HasValue ?
                new ObjectParameter("I_ID", i_ID) :
                new ObjectParameter("I_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<InitialTotal1_Result>("[QLCoffeEntities].[InitialTotal1](@I_ID)", i_IDParameter);
        }
    
        [DbFunction("QLCoffeEntities", "sales_trends")]
        public virtual IQueryable<sales_trends_Result> sales_trends(Nullable<System.DateTime> start_date, Nullable<System.DateTime> end_date)
        {
            var start_dateParameter = start_date.HasValue ?
                new ObjectParameter("start_date", start_date) :
                new ObjectParameter("start_date", typeof(System.DateTime));
    
            var end_dateParameter = end_date.HasValue ?
                new ObjectParameter("end_date", end_date) :
                new ObjectParameter("end_date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<sales_trends_Result>("[QLCoffeEntities].[sales_trends](@start_date, @end_date)", start_dateParameter, end_dateParameter);
        }
    
        [DbFunction("QLCoffeEntities", "V_CheckAccount")]
        public virtual IQueryable<V_CheckAccount_Result> V_CheckAccount(string user, string pass, string role)
        {
            var userParameter = user != null ?
                new ObjectParameter("user", user) :
                new ObjectParameter("user", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("pass", pass) :
                new ObjectParameter("pass", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("role", role) :
                new ObjectParameter("role", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<V_CheckAccount_Result>("[QLCoffeEntities].[V_CheckAccount](@user, @pass, @role)", userParameter, passParameter, roleParameter);
        }
    
        public virtual int Add_Account(string e_ID, string username, string password, Nullable<bool> active, string stratification)
        {
            var e_IDParameter = e_ID != null ?
                new ObjectParameter("E_ID", e_ID) :
                new ObjectParameter("E_ID", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var stratificationParameter = stratification != null ?
                new ObjectParameter("Stratification", stratification) :
                new ObjectParameter("Stratification", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Add_Account", e_IDParameter, usernameParameter, passwordParameter, activeParameter, stratificationParameter);
        }
    
        public virtual int Add_Customer(string cID, string cName)
        {
            var cIDParameter = cID != null ?
                new ObjectParameter("cID", cID) :
                new ObjectParameter("cID", typeof(string));
    
            var cNameParameter = cName != null ?
                new ObjectParameter("cName", cName) :
                new ObjectParameter("cName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Add_Customer", cIDParameter, cNameParameter);
        }
    
        public virtual int add_invoice(string id, string idemp, string idcus, string delivery, Nullable<double> cp)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            var idempParameter = idemp != null ?
                new ObjectParameter("idemp", idemp) :
                new ObjectParameter("idemp", typeof(string));
    
            var idcusParameter = idcus != null ?
                new ObjectParameter("idcus", idcus) :
                new ObjectParameter("idcus", typeof(string));
    
            var deliveryParameter = delivery != null ?
                new ObjectParameter("delivery", delivery) :
                new ObjectParameter("delivery", typeof(string));
    
            var cpParameter = cp.HasValue ?
                new ObjectParameter("cp", cp) :
                new ObjectParameter("cp", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("add_invoice", idParameter, idempParameter, idcusParameter, deliveryParameter, cpParameter);
        }
    
        public virtual int Add_Invoice_detail(string i_ID, string d_ID, Nullable<int> quality)
        {
            var i_IDParameter = i_ID != null ?
                new ObjectParameter("I_ID", i_ID) :
                new ObjectParameter("I_ID", typeof(string));
    
            var d_IDParameter = d_ID != null ?
                new ObjectParameter("D_ID", d_ID) :
                new ObjectParameter("D_ID", typeof(string));
    
            var qualityParameter = quality.HasValue ?
                new ObjectParameter("quality", quality) :
                new ObjectParameter("quality", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Add_Invoice_detail", i_IDParameter, d_IDParameter, qualityParameter);
        }
    
        public virtual int add_menu(string dID, string name, string description, string img, Nullable<int> prices)
        {
            var dIDParameter = dID != null ?
                new ObjectParameter("dID", dID) :
                new ObjectParameter("dID", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var imgParameter = img != null ?
                new ObjectParameter("img", img) :
                new ObjectParameter("img", typeof(string));
    
            var pricesParameter = prices.HasValue ?
                new ObjectParameter("prices", prices) :
                new ObjectParameter("prices", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("add_menu", dIDParameter, nameParameter, descriptionParameter, imgParameter, pricesParameter);
        }
    
        public virtual int add_supplier_detail(string s_ID, string s_Name, string s_Address)
        {
            var s_IDParameter = s_ID != null ?
                new ObjectParameter("S_ID", s_ID) :
                new ObjectParameter("S_ID", typeof(string));
    
            var s_NameParameter = s_Name != null ?
                new ObjectParameter("S_Name", s_Name) :
                new ObjectParameter("S_Name", typeof(string));
    
            var s_AddressParameter = s_Address != null ?
                new ObjectParameter("S_Address", s_Address) :
                new ObjectParameter("S_Address", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("add_supplier_detail", s_IDParameter, s_NameParameter, s_AddressParameter);
        }
    
        public virtual int addAccount(string e_ID, string username, string password, string sta, Nullable<bool> active)
        {
            var e_IDParameter = e_ID != null ?
                new ObjectParameter("E_ID", e_ID) :
                new ObjectParameter("E_ID", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var staParameter = sta != null ?
                new ObjectParameter("sta", sta) :
                new ObjectParameter("sta", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("active", active) :
                new ObjectParameter("active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addAccount", e_IDParameter, usernameParameter, passwordParameter, staParameter, activeParameter);
        }
    
        public virtual int AddEmployee(string e_ID, Nullable<System.DateTime> start, string name, string position, Nullable<int> fixed_salary, string email, Nullable<int> phone_number, string status)
        {
            var e_IDParameter = e_ID != null ?
                new ObjectParameter("E_ID", e_ID) :
                new ObjectParameter("E_ID", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var positionParameter = position != null ?
                new ObjectParameter("position", position) :
                new ObjectParameter("position", typeof(string));
    
            var fixed_salaryParameter = fixed_salary.HasValue ?
                new ObjectParameter("fixed_salary", fixed_salary) :
                new ObjectParameter("fixed_salary", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var phone_numberParameter = phone_number.HasValue ?
                new ObjectParameter("phone_number", phone_number) :
                new ObjectParameter("phone_number", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEmployee", e_IDParameter, startParameter, nameParameter, positionParameter, fixed_salaryParameter, emailParameter, phone_numberParameter, statusParameter);
        }
    
        public virtual int AddInventoryProduct(Nullable<int> amount, Nullable<int> buyingPrice, string dID, string supplier_ID)
        {
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(int));
    
            var buyingPriceParameter = buyingPrice.HasValue ?
                new ObjectParameter("buyingPrice", buyingPrice) :
                new ObjectParameter("buyingPrice", typeof(int));
    
            var dIDParameter = dID != null ?
                new ObjectParameter("dID", dID) :
                new ObjectParameter("dID", typeof(string));
    
            var supplier_IDParameter = supplier_ID != null ?
                new ObjectParameter("supplier_ID", supplier_ID) :
                new ObjectParameter("supplier_ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddInventoryProduct", amountParameter, buyingPriceParameter, dIDParameter, supplier_IDParameter);
        }
    
        public virtual int addMonthlyPay(string e_ID, Nullable<System.DateTime> month, Nullable<int> days_absent, Nullable<int> penalty, Nullable<int> totalSalary)
        {
            var e_IDParameter = e_ID != null ?
                new ObjectParameter("E_ID", e_ID) :
                new ObjectParameter("E_ID", typeof(string));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(System.DateTime));
    
            var days_absentParameter = days_absent.HasValue ?
                new ObjectParameter("days_absent", days_absent) :
                new ObjectParameter("days_absent", typeof(int));
    
            var penaltyParameter = penalty.HasValue ?
                new ObjectParameter("Penalty", penalty) :
                new ObjectParameter("Penalty", typeof(int));
    
            var totalSalaryParameter = totalSalary.HasValue ?
                new ObjectParameter("TotalSalary", totalSalary) :
                new ObjectParameter("TotalSalary", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addMonthlyPay", e_IDParameter, monthParameter, days_absentParameter, penaltyParameter, totalSalaryParameter);
        }
    
        public virtual int addMonthlyPay1(string e_ID, Nullable<System.DateTime> month, Nullable<int> days_absent, Nullable<int> penalty, Nullable<int> totalSalary)
        {
            var e_IDParameter = e_ID != null ?
                new ObjectParameter("E_ID", e_ID) :
                new ObjectParameter("E_ID", typeof(string));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(System.DateTime));
    
            var days_absentParameter = days_absent.HasValue ?
                new ObjectParameter("days_absent", days_absent) :
                new ObjectParameter("days_absent", typeof(int));
    
            var penaltyParameter = penalty.HasValue ?
                new ObjectParameter("Penalty", penalty) :
                new ObjectParameter("Penalty", typeof(int));
    
            var totalSalaryParameter = totalSalary.HasValue ?
                new ObjectParameter("TotalSalary", totalSalary) :
                new ObjectParameter("TotalSalary", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addMonthlyPay1", e_IDParameter, monthParameter, days_absentParameter, penaltyParameter, totalSalaryParameter);
        }
    
        public virtual int changeMonthlyPay(string e_ID, Nullable<System.DateTime> month, Nullable<int> days_absent, Nullable<int> penalty, Nullable<int> totalSalary)
        {
            var e_IDParameter = e_ID != null ?
                new ObjectParameter("E_ID", e_ID) :
                new ObjectParameter("E_ID", typeof(string));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(System.DateTime));
    
            var days_absentParameter = days_absent.HasValue ?
                new ObjectParameter("days_absent", days_absent) :
                new ObjectParameter("days_absent", typeof(int));
    
            var penaltyParameter = penalty.HasValue ?
                new ObjectParameter("Penalty", penalty) :
                new ObjectParameter("Penalty", typeof(int));
    
            var totalSalaryParameter = totalSalary.HasValue ?
                new ObjectParameter("TotalSalary", totalSalary) :
                new ObjectParameter("TotalSalary", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("changeMonthlyPay", e_IDParameter, monthParameter, days_absentParameter, penaltyParameter, totalSalaryParameter);
        }
    
        public virtual int DEL_Acc(string e_ID)
        {
            var e_IDParameter = e_ID != null ?
                new ObjectParameter("E_ID", e_ID) :
                new ObjectParameter("E_ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DEL_Acc", e_IDParameter);
        }
    
        public virtual int Delete_Employee1(string e_ID)
        {
            var e_IDParameter = e_ID != null ?
                new ObjectParameter("E_ID", e_ID) :
                new ObjectParameter("E_ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_Employee1", e_IDParameter);
        }
    
        public virtual int Delete_Inventory(string dID)
        {
            var dIDParameter = dID != null ?
                new ObjectParameter("dID", dID) :
                new ObjectParameter("dID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_Inventory", dIDParameter);
        }
    
        public virtual int delete_invoice(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("delete_invoice", idParameter);
        }
    
        public virtual int delete_InvoiceDetail(string d_ID)
        {
            var d_IDParameter = d_ID != null ?
                new ObjectParameter("D_ID", d_ID) :
                new ObjectParameter("D_ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("delete_InvoiceDetail", d_IDParameter);
        }
    
        public virtual int delete_menu(string dID)
        {
            var dIDParameter = dID != null ?
                new ObjectParameter("dID", dID) :
                new ObjectParameter("dID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("delete_menu", dIDParameter);
        }
    
        public virtual int Delete_supplier_detail(string supplier_id)
        {
            var supplier_idParameter = supplier_id != null ?
                new ObjectParameter("supplier_id", supplier_id) :
                new ObjectParameter("supplier_id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_supplier_detail", supplier_idParameter);
        }
    
        public virtual int deleteMonthlyPay(string e_ID, Nullable<System.DateTime> month)
        {
            var e_IDParameter = e_ID != null ?
                new ObjectParameter("E_ID", e_ID) :
                new ObjectParameter("E_ID", typeof(string));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteMonthlyPay", e_IDParameter, monthParameter);
        }
    
        public virtual int Insert_Employee_Account(Nullable<int> employee_ID, string name, Nullable<int> fixed_salary, Nullable<int> phone_number, string position)
        {
            var employee_IDParameter = employee_ID.HasValue ?
                new ObjectParameter("Employee_ID", employee_ID) :
                new ObjectParameter("Employee_ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var fixed_salaryParameter = fixed_salary.HasValue ?
                new ObjectParameter("fixed_salary", fixed_salary) :
                new ObjectParameter("fixed_salary", typeof(int));
    
            var phone_numberParameter = phone_number.HasValue ?
                new ObjectParameter("phone_number", phone_number) :
                new ObjectParameter("phone_number", typeof(int));
    
            var positionParameter = position != null ?
                new ObjectParameter("position", position) :
                new ObjectParameter("position", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Employee_Account", employee_IDParameter, nameParameter, fixed_salaryParameter, phone_numberParameter, positionParameter);
        }
    
        public virtual int Insert_Employee_Account12(Nullable<int> employee_ID, string name, Nullable<int> fixed_salary, Nullable<int> phone_number, string position)
        {
            var employee_IDParameter = employee_ID.HasValue ?
                new ObjectParameter("Employee_ID", employee_ID) :
                new ObjectParameter("Employee_ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var fixed_salaryParameter = fixed_salary.HasValue ?
                new ObjectParameter("fixed_salary", fixed_salary) :
                new ObjectParameter("fixed_salary", typeof(int));
    
            var phone_numberParameter = phone_number.HasValue ?
                new ObjectParameter("phone_number", phone_number) :
                new ObjectParameter("phone_number", typeof(int));
    
            var positionParameter = position != null ?
                new ObjectParameter("position", position) :
                new ObjectParameter("position", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Employee_Account12", employee_IDParameter, nameParameter, fixed_salaryParameter, phone_numberParameter, positionParameter);
        }
    
        public virtual int manageMonthlyPay(string e_ID, Nullable<System.DateTime> month, Nullable<int> days_absent, Nullable<int> penalty, Nullable<int> totalSalary, string action)
        {
            var e_IDParameter = e_ID != null ?
                new ObjectParameter("E_ID", e_ID) :
                new ObjectParameter("E_ID", typeof(string));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(System.DateTime));
    
            var days_absentParameter = days_absent.HasValue ?
                new ObjectParameter("days_absent", days_absent) :
                new ObjectParameter("days_absent", typeof(int));
    
            var penaltyParameter = penalty.HasValue ?
                new ObjectParameter("Penalty", penalty) :
                new ObjectParameter("Penalty", typeof(int));
    
            var totalSalaryParameter = totalSalary.HasValue ?
                new ObjectParameter("TotalSalary", totalSalary) :
                new ObjectParameter("TotalSalary", typeof(int));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("manageMonthlyPay", e_IDParameter, monthParameter, days_absentParameter, penaltyParameter, totalSalaryParameter, actionParameter);
        }
    
        public virtual ObjectResult<string> securityTest()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("securityTest");
        }
    
        public virtual ObjectResult<string> securityTest2()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("securityTest2");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int Update_Account(string e_ID, string username, string password, Nullable<bool> active, string stratification)
        {
            var e_IDParameter = e_ID != null ?
                new ObjectParameter("E_ID", e_ID) :
                new ObjectParameter("E_ID", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var stratificationParameter = stratification != null ?
                new ObjectParameter("Stratification", stratification) :
                new ObjectParameter("Stratification", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_Account", e_IDParameter, usernameParameter, passwordParameter, activeParameter, stratificationParameter);
        }
    
        public virtual int Update_Employee(string e_ID, Nullable<System.DateTime> start_Date, string name, string position, Nullable<int> fixed_Salary, string email, Nullable<int> phone_Number, string status)
        {
            var e_IDParameter = e_ID != null ?
                new ObjectParameter("E_ID", e_ID) :
                new ObjectParameter("E_ID", typeof(string));
    
            var start_DateParameter = start_Date.HasValue ?
                new ObjectParameter("Start_Date", start_Date) :
                new ObjectParameter("Start_Date", typeof(System.DateTime));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var positionParameter = position != null ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(string));
    
            var fixed_SalaryParameter = fixed_Salary.HasValue ?
                new ObjectParameter("Fixed_Salary", fixed_Salary) :
                new ObjectParameter("Fixed_Salary", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phone_NumberParameter = phone_Number.HasValue ?
                new ObjectParameter("Phone_Number", phone_Number) :
                new ObjectParameter("Phone_Number", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_Employee", e_IDParameter, start_DateParameter, nameParameter, positionParameter, fixed_SalaryParameter, emailParameter, phone_NumberParameter, statusParameter);
        }
    
        public virtual int Update_Inventory(Nullable<int> amount, Nullable<int> buying_price, string dID)
        {
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(int));
    
            var buying_priceParameter = buying_price.HasValue ?
                new ObjectParameter("buying_price", buying_price) :
                new ObjectParameter("buying_price", typeof(int));
    
            var dIDParameter = dID != null ?
                new ObjectParameter("dID", dID) :
                new ObjectParameter("dID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_Inventory", amountParameter, buying_priceParameter, dIDParameter);
        }
    
        public virtual int update_invoice(string id, string idemp, string idcus, string delivery, Nullable<double> cp)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            var idempParameter = idemp != null ?
                new ObjectParameter("idemp", idemp) :
                new ObjectParameter("idemp", typeof(string));
    
            var idcusParameter = idcus != null ?
                new ObjectParameter("idcus", idcus) :
                new ObjectParameter("idcus", typeof(string));
    
            var deliveryParameter = delivery != null ?
                new ObjectParameter("delivery", delivery) :
                new ObjectParameter("delivery", typeof(string));
    
            var cpParameter = cp.HasValue ?
                new ObjectParameter("cp", cp) :
                new ObjectParameter("cp", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("update_invoice", idParameter, idempParameter, idcusParameter, deliveryParameter, cpParameter);
        }
    
        public virtual int update_invoice_detail(string i_ID, string d_ID, Nullable<int> new_quality)
        {
            var i_IDParameter = i_ID != null ?
                new ObjectParameter("I_ID", i_ID) :
                new ObjectParameter("I_ID", typeof(string));
    
            var d_IDParameter = d_ID != null ?
                new ObjectParameter("D_ID", d_ID) :
                new ObjectParameter("D_ID", typeof(string));
    
            var new_qualityParameter = new_quality.HasValue ?
                new ObjectParameter("new_quality", new_quality) :
                new ObjectParameter("new_quality", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("update_invoice_detail", i_IDParameter, d_IDParameter, new_qualityParameter);
        }
    
        public virtual int update_InvoiceDetail(string invoice_id, string drink_id, Nullable<int> new_quality)
        {
            var invoice_idParameter = invoice_id != null ?
                new ObjectParameter("Invoice_id", invoice_id) :
                new ObjectParameter("Invoice_id", typeof(string));
    
            var drink_idParameter = drink_id != null ?
                new ObjectParameter("Drink_id", drink_id) :
                new ObjectParameter("Drink_id", typeof(string));
    
            var new_qualityParameter = new_quality.HasValue ?
                new ObjectParameter("new_quality", new_quality) :
                new ObjectParameter("new_quality", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("update_InvoiceDetail", invoice_idParameter, drink_idParameter, new_qualityParameter);
        }
    
        public virtual int update_menu(string dID, string name, string description, string img, Nullable<int> prices)
        {
            var dIDParameter = dID != null ?
                new ObjectParameter("dID", dID) :
                new ObjectParameter("dID", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var imgParameter = img != null ?
                new ObjectParameter("img", img) :
                new ObjectParameter("img", typeof(string));
    
            var pricesParameter = prices.HasValue ?
                new ObjectParameter("prices", prices) :
                new ObjectParameter("prices", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("update_menu", dIDParameter, nameParameter, descriptionParameter, imgParameter, pricesParameter);
        }
    
        public virtual int Update_supplierdetail(string supplier_id, string supply_name, string supply_address)
        {
            var supplier_idParameter = supplier_id != null ?
                new ObjectParameter("supplier_id", supplier_id) :
                new ObjectParameter("supplier_id", typeof(string));
    
            var supply_nameParameter = supply_name != null ?
                new ObjectParameter("supply_name", supply_name) :
                new ObjectParameter("supply_name", typeof(string));
    
            var supply_addressParameter = supply_address != null ?
                new ObjectParameter("supply_address", supply_address) :
                new ObjectParameter("supply_address", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_supplierdetail", supplier_idParameter, supply_nameParameter, supply_addressParameter);
        }
    
        public virtual int updateAccount(string e_ID, string username, string password, string sta, Nullable<bool> active)
        {
            var e_IDParameter = e_ID != null ?
                new ObjectParameter("E_ID", e_ID) :
                new ObjectParameter("E_ID", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var staParameter = sta != null ?
                new ObjectParameter("sta", sta) :
                new ObjectParameter("sta", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("active", active) :
                new ObjectParameter("active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateAccount", e_IDParameter, usernameParameter, passwordParameter, staParameter, activeParameter);
        }
    }
}
